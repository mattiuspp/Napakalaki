package napakalaki;

import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class VentanaPrincipal extends javax.swing.JFrame implements Vista{
    private Napakalaki juego;
    private JD_dado dado;
    private String[] nombresJugadores;
    private Monstruo monstruoEnJuego;
    private Jugador jugadorActivo;
    private ArrayList<TesoroGrafico> tesorosVisiblesAlimpiar = new ArrayList();
    private ArrayList<Tesoro> tesorosVisiblesSeleccionados = new ArrayList();
    private ArrayList<TesoroGrafico> tesorosOcultosAlimpiar = new ArrayList();
    private ArrayList<Tesoro> tesorosOcultosSeleccionados = new ArrayList();
    
    private class TesoroGrafico extends JPanel {
        protected Tesoro tesoro; // asociaci√≥n con el tesoro que representa 
        private JLabel jL_nombre = new JLabel();
        private JLabel jL_bonusBasico = new JLabel();
//        private JLabel jL_bonusEspecial = new JLabel();
        private JLabel jL_piezasOro = new JLabel();

        TesoroGrafico (Tesoro unTesoro) {
            tesoro = unTesoro;
            this.setPreferredSize(new java.awt.Dimension(100, 140));
            this.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
            
            jL_nombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jL_nombre.setText(tesoro.getNombre());
            jL_bonusBasico.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jL_bonusBasico.setText("" + tesoro.getValorBasico());
//            jL_bonusEspecial.setHorizontalAlignment(javax.swing.SwingConstants.NORTH_EAST);
//            jL_bonusEspecial.setText("" + tesoro.getValorBasico());
            jL_piezasOro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jL_piezasOro.setText("" + tesoro.obtenerPiezasOro());
            
            this.setBackground (new java.awt.Color(200,200,0));
            this.setOpaque(false);
            this.add(jL_nombre,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 30, 90, -1));
                        this.add(jL_bonusBasico,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 10, 90, -1));
                                    this.add(jL_nombre,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 50, 90, -1));
        }
    }
    
    private class TesoroGraficoVisible extends TesoroGrafico {
        TesoroGraficoVisible (Tesoro unTesoro) {
            super(unTesoro);
            addMouseListener(new java.awt.event.MouseAdapter() 
            {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if (tesorosVisiblesSeleccionados.contains(TesoroGraficoVisible.this.tesoro))
                    {
                        tesorosVisiblesSeleccionados.remove(TesoroGraficoVisible.this.tesoro);
                        TesoroGraficoVisible.this.setOpaque(false);
                    }
                    else
                    {
                        tesorosVisiblesSeleccionados.add(TesoroGraficoVisible.this.tesoro);
                        TesoroGraficoVisible.this.setOpaque(true); 
                        TesoroGraficoVisible.this.setEnabled(false);
                    }
                    //
                }
            });
         }
    }
    
    private class TesoroGraficoOculto extends TesoroGrafico {
        TesoroGraficoOculto (Tesoro unTesoro) {
            super(unTesoro);
            addMouseListener(new java.awt.event.MouseAdapter() 
            {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
//                    TesoroGraficoOculto.this.setOpaque(true); 
//                    TesoroGraficoOculto.this.setEnabled(false);
                    
                    if(tesorosOcultosSeleccionados.contains(TesoroGraficoOculto.this.tesoro))
                    {
                        tesorosOcultosSeleccionados.remove(TesoroGraficoOculto.this.tesoro);
                        TesoroGraficoOculto.this.setOpaque(false);
                        TesoroGraficoOculto.this.setEnabled(true);
                    }
                    else
                    {
                        tesorosOcultosSeleccionados.add(TesoroGraficoOculto.this.tesoro);
                        TesoroGraficoOculto.this.setOpaque(true); 
                        TesoroGraficoOculto.this.setEnabled(false);
                    }
                }
            });
         }
    }

    public VentanaPrincipal(Napakalaki unJuego) {
        juego = unJuego;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jP_monstruos = new javax.swing.JPanel();
        jL_malRollo = new javax.swing.JLabel();
        jL_nombreMonstruo = new javax.swing.JLabel();
        jL_nivelesGanados = new javax.swing.JLabel();
        jL_tesorosGanados = new javax.swing.JLabel();
        jL_nivel = new javax.swing.JLabel();
        jL_nivelContraSectarios = new javax.swing.JLabel();
        jL_nivelesPerdidos = new javax.swing.JLabel();
        jP_jugadores = new javax.swing.JPanel();
        jL_nombreJugador = new javax.swing.JLabel();
        jP_tesorosVisibles = new javax.swing.JPanel();
        jP_tesorosOcultos = new javax.swing.JPanel();
        jL_esSectario = new javax.swing.JLabel();
        jL_nivelCombate = new javax.swing.JLabel();
        jL_bonusSectario = new javax.swing.JLabel();
        jL_malRolloPendiente = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jL_ocultosPerdidos = new javax.swing.JLabel();
        jL_tipoOcultosPerdidos = new javax.swing.JLabel();
        jL_visiblesPerdidos = new javax.swing.JLabel();
        jL_tipoVisiblesPerdidos = new javax.swing.JLabel();
        jL_resultadoCombate = new javax.swing.JLabel();
        jB_equiparse = new javax.swing.JButton();
        jB_comprarNivel = new javax.swing.JButton();
        jB_descartarseTesoros = new javax.swing.JButton();
        jB_combatir = new javax.swing.JButton();
        jB_siguiente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jP_monstruos.setBorder(javax.swing.BorderFactory.createTitledBorder("Territorio del Terrible Monstruo"));

        jL_malRollo.setText("Mal Rollo del monstruo");
        jL_malRollo.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jL_nombreMonstruo.setText("Nombre Monstruo");

        jL_nivelesGanados.setText("Niveles Ganados");

        jL_tesorosGanados.setText("Tesoros Ganados");

        jL_nivel.setText("Nivel");

        jL_nivelContraSectarios.setText("Nivel contra Sectarios");

        jL_nivelesPerdidos.setText("Niveles Perdidos");

        javax.swing.GroupLayout jP_monstruosLayout = new javax.swing.GroupLayout(jP_monstruos);
        jP_monstruos.setLayout(jP_monstruosLayout);
        jP_monstruosLayout.setHorizontalGroup(
            jP_monstruosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_monstruosLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jP_monstruosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jL_nombreMonstruo)
                    .addComponent(jL_nivelesGanados)
                    .addComponent(jL_tesorosGanados))
                .addGap(129, 129, 129)
                .addGroup(jP_monstruosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jL_nivelContraSectarios)
                    .addComponent(jL_nivel)
                    .addComponent(jL_nivelesPerdidos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jL_malRollo, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jP_monstruosLayout.setVerticalGroup(
            jP_monstruosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_monstruosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jP_monstruosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jL_malRollo, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addGroup(jP_monstruosLayout.createSequentialGroup()
                        .addGroup(jP_monstruosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jL_nombreMonstruo)
                            .addComponent(jL_nivel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jP_monstruosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jL_nivelesGanados)
                            .addComponent(jL_nivelContraSectarios))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jP_monstruosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jL_nivelesPerdidos)
                            .addComponent(jL_tesorosGanados))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jP_jugadores.setBorder(javax.swing.BorderFactory.createTitledBorder("Parcelita de los d√©biles jugadores"));

        jL_nombreJugador.setText("Nombre Jugador");

        jP_tesorosVisibles.setBorder(javax.swing.BorderFactory.createTitledBorder("Equipo"));

        jP_tesorosOcultos.setBorder(javax.swing.BorderFactory.createTitledBorder("Cartas Ocultas"));

        jL_esSectario.setText("Humano");

        jL_nivelCombate.setText("Nivel de Combate");

        jL_bonusSectario.setText("Bonus Sectario");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("MalRollo Pendiente"));

        jL_ocultosPerdidos.setText("N¬∫ Ocultos a perder:");

        jL_tipoOcultosPerdidos.setText("Tipo:");

        jL_visiblesPerdidos.setText("N¬∫ Visibles a perder");

        jL_tipoVisiblesPerdidos.setText("Tipo:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jL_ocultosPerdidos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jL_tipoOcultosPerdidos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jL_visiblesPerdidos, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                            .addComponent(jL_tipoVisiblesPerdidos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jL_ocultosPerdidos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jL_tipoOcultosPerdidos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jL_visiblesPerdidos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jL_tipoVisiblesPerdidos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jL_resultadoCombate.setText("Resultado del Combate: ");
        jL_resultadoCombate.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jP_jugadoresLayout = new javax.swing.GroupLayout(jP_jugadores);
        jP_jugadores.setLayout(jP_jugadoresLayout);
        jP_jugadoresLayout.setHorizontalGroup(
            jP_jugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_jugadoresLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jP_jugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jP_jugadoresLayout.createSequentialGroup()
                        .addComponent(jP_tesorosOcultos, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jP_jugadoresLayout.createSequentialGroup()
                        .addComponent(jP_tesorosVisibles, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jP_jugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jP_jugadoresLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jL_malRolloPendiente))
                            .addComponent(jL_resultadoCombate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jP_jugadoresLayout.createSequentialGroup()
                        .addComponent(jL_nombreJugador)
                        .addGap(46, 46, 46)
                        .addComponent(jL_nivelCombate)
                        .addGap(60, 60, 60)
                        .addComponent(jL_esSectario)
                        .addGap(169, 169, 169)
                        .addComponent(jL_bonusSectario)))
                .addContainerGap())
        );
        jP_jugadoresLayout.setVerticalGroup(
            jP_jugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_jugadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jP_jugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jL_nombreJugador)
                    .addComponent(jL_bonusSectario)
                    .addComponent(jL_nivelCombate)
                    .addComponent(jL_esSectario))
                .addGroup(jP_jugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jP_jugadoresLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jL_resultadoCombate, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jL_malRolloPendiente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jP_jugadoresLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jP_tesorosVisibles, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jP_tesorosOcultos, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jB_equiparse.setText("Equiparse");
        jB_equiparse.setEnabled(false);
        jB_equiparse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_equiparseActionPerformed(evt);
            }
        });

        jB_comprarNivel.setText("Comprar Nivel");
        jB_comprarNivel.setEnabled(false);
        jB_comprarNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_comprarNivelActionPerformed(evt);
            }
        });

        jB_descartarseTesoros.setText("Descartarse Tesoros");
        jB_descartarseTesoros.setEnabled(false);
        jB_descartarseTesoros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_descartarseTesorosActionPerformed(evt);
            }
        });

        jB_combatir.setText("¬°COMBATIR!");
        jB_combatir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_combatirActionPerformed(evt);
            }
        });

        jB_siguiente.setText("Siguiente");
        jB_siguiente.setEnabled(false);
        jB_siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_siguienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jP_monstruos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jP_jugadores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jB_equiparse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jB_comprarNivel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jB_descartarseTesoros)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jB_combatir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jB_siguiente)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jP_monstruos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jP_jugadores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB_equiparse)
                    .addComponent(jB_comprarNivel)
                    .addComponent(jB_descartarseTesoros)
                    .addComponent(jB_combatir)
                    .addComponent(jB_siguiente))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jB_equiparseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_equiparseActionPerformed
        juego.obtenerJugadorActivo().equiparTesoros(tesorosOcultosSeleccionados);
        actualizarJugador();
    }//GEN-LAST:event_jB_equiparseActionPerformed

    private void jB_descartarseTesorosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_descartarseTesorosActionPerformed
        juego.descartarTesoros(tesorosVisiblesSeleccionados, tesorosOcultosSeleccionados);
        actualizarJugador();
    }//GEN-LAST:event_jB_descartarseTesorosActionPerformed

    private void jB_comprarNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_comprarNivelActionPerformed
        ArrayList<Tesoro> cartasaVender = tesorosOcultosSeleccionados;
        cartasaVender.addAll(tesorosVisiblesSeleccionados);
        juego.comprarNivelesJugador(cartasaVender);
        actualizarJugador();
    }//GEN-LAST:event_jB_comprarNivelActionPerformed

    private void jB_combatirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_combatirActionPerformed
        ResultadoCombate resultado = juego.desarrollarCombate();
        jL_resultadoCombate.setText("Resultado combate: \n" + resultado);
        boolean cumplioMalRollo = jugadorActivo.obtenerMalRolloPendiente().esVacio();
        if(cumplioMalRollo == true)
        {
            jB_comprarNivel.setEnabled(true);
            jB_equiparse.setEnabled(true);
        }
        
        jB_siguiente.setEnabled(true);
        jB_descartarseTesoros.setEnabled(true);
        jB_combatir.setEnabled(false);
        actualizarJugador();
    }//GEN-LAST:event_jB_combatirActionPerformed

    private void jB_siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_siguienteActionPerformed
            int fin = juego.siguienteTurno();
            if(fin == 0)
            {
                juego.siguienteTurno();
                jB_comprarNivel.setEnabled(false);
                jB_equiparse.setEnabled(false);
                jB_descartarseTesoros.setEnabled(false);
                jB_siguiente.setEnabled(false);
                jB_combatir.setEnabled(true);
                jL_malRolloPendiente.setText("");
                actualizarJugador();
                actualizarMonstruo();
            }                
    }//GEN-LAST:event_jB_siguienteActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new VentanaPrincipal().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_combatir;
    private javax.swing.JButton jB_comprarNivel;
    private javax.swing.JButton jB_descartarseTesoros;
    private javax.swing.JButton jB_equiparse;
    private javax.swing.JButton jB_siguiente;
    private javax.swing.JLabel jL_bonusSectario;
    private javax.swing.JLabel jL_esSectario;
    private javax.swing.JLabel jL_malRollo;
    private javax.swing.JLabel jL_malRolloPendiente;
    private javax.swing.JLabel jL_nivel;
    private javax.swing.JLabel jL_nivelCombate;
    private javax.swing.JLabel jL_nivelContraSectarios;
    private javax.swing.JLabel jL_nivelesGanados;
    private javax.swing.JLabel jL_nivelesPerdidos;
    private javax.swing.JLabel jL_nombreJugador;
    private javax.swing.JLabel jL_nombreMonstruo;
    private javax.swing.JLabel jL_ocultosPerdidos;
    private javax.swing.JLabel jL_resultadoCombate;
    private javax.swing.JLabel jL_tesorosGanados;
    private javax.swing.JLabel jL_tipoOcultosPerdidos;
    private javax.swing.JLabel jL_tipoVisiblesPerdidos;
    private javax.swing.JLabel jL_visiblesPerdidos;
    private javax.swing.JPanel jP_jugadores;
    private javax.swing.JPanel jP_monstruos;
    private javax.swing.JPanel jP_tesorosOcultos;
    private javax.swing.JPanel jP_tesorosVisibles;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void  mostrar(String[] args) {
        JD_nombresJugadores dialogoNombres;
        dado = new JD_dado (this,true);
        dialogoNombres = new JD_nombresJugadores (this,true);
        nombresJugadores = dialogoNombres.getNombres();
        // A√±adir aqu√≠ el c√≥digo para comunicarse con la clase Napakalaki
        // y comenzar el juego
        juego.comenzarJuego(nombresJugadores);
        actualizarJugador();
        actualizarMonstruo();

        this.setVisible(true);
    }

    @Override
    public int getDado(String s1, String s2) {
        return dado.getValor(s1, s2);
    }
    
    private void actualizarMonstruo()
    {
        monstruoEnJuego = juego.obtenerMonstruoActivo();
        jL_nombreMonstruo.setText (monstruoEnJuego.getNombre());
        jL_nivelesGanados.setText("Niveles Ganados: " + monstruoEnJuego.cualEsTuBuenRollo().obtenerNivelesGanados());
        jL_tesorosGanados.setText("Tesoros Ganados: " + monstruoEnJuego.cualEsTuBuenRollo().obtenerTesorosGanados());
        jL_nivel.setText("Nivel: " + monstruoEnJuego.getValorBasico());
        jL_nivelContraSectarios.setText("Nivel contra Sectarios: " + monstruoEnJuego.getValorEspecial());
        jL_nivelesPerdidos.setText("Niveles perdidos: " + monstruoEnJuego.cualEsTuMalRollo().obtenerNivelesPerdidos());
        jL_resultadoCombate.setText("");

        jL_malRollo.setText (monstruoEnJuego.cualEsTuMalRollo().obtenerTexto()); 
        
        pack();

    }
    
    private void actualizarJugador()
    {        
        TesoroGrafico unTesoroGrafico; // variable auxiliar para varios usos
        jugadorActivo = juego.obtenerJugadorActivo(); // asociaci√≥n con el modelo

        ////INCLUIR instrucciones para actualizar el nombre, el nivel, u otra
        // informaci√≥n del jugador activo distinta a los tesoros
        jugadorActivo = juego.obtenerJugadorActivo();
        jL_nombreJugador.setText("" + jugadorActivo.obtenerNombre());
        jL_nivelCombate.setText("Nivel de combate: " + jugadorActivo.obtenerNivelCombate());


        if (jugadorActivo instanceof JugadorSectario)
        {
            jL_esSectario.setText("Sectario");
            jL_bonusSectario.setText("+" + ((JugadorSectario)jugadorActivo).getMiCartaSectario().getValorBasico() 
                                      + " por cada sectario en juego.");
        }
        else
        {
            jL_esSectario.setText("Humano");
            jL_bonusSectario.setText("");
        }

        for (TesoroGrafico tg : tesorosVisiblesAlimpiar)
            jP_tesorosVisibles.remove(tg);
        tesorosVisiblesAlimpiar.clear();

        // Ahora se a√±aden los tesoros visibles del jugador actual
        for (Tesoro t : jugadorActivo.obtenerTesorosVisibles()) 
        {
            unTesoroGrafico = new TesoroGraficoVisible(t);
            jP_tesorosVisibles.add (unTesoroGrafico);
            tesorosVisiblesAlimpiar.add(unTesoroGrafico);
        }

        // PROCEDER de forma similar con los tesoros ocultos
        // INCLUIR otras instrucciones que se estimen necesarias
        for (TesoroGrafico tg : tesorosOcultosAlimpiar)
            jP_tesorosOcultos.remove(tg);
        tesorosOcultosAlimpiar.clear();

        for (Tesoro t : jugadorActivo.obtenerTesorosOcultos()) 
        {
            unTesoroGrafico = new TesoroGraficoOculto(t);
            jP_tesorosOcultos.add(unTesoroGrafico);
            tesorosOcultosAlimpiar.add(unTesoroGrafico);
        }

        // El jugador que acaba de recibir el turno no debe tener ningun tesoro
        // visible ni oculto seleccionado
        tesorosVisiblesSeleccionados.clear();
        tesorosOcultosSeleccionados.clear();

        // Actualizamos malRolloPendiente
        if (!jugadorActivo.obtenerMalRolloPendiente().esVacio())
        {
            jL_ocultosPerdidos.setText("Ocultos perdidos: " + jugadorActivo.obtenerMalRolloPendiente().obtenerOcultosPerdidos());
            String f = new String();

            f += "Tipos ocultos perdidos: ";

            for (TipoTesoro t: jugadorActivo.obtenerMalRolloPendiente().obtenerTipoOcultosPerdidos())
            {
                f += t + " | ";
            }
            jL_tipoOcultosPerdidos.setText(f);

            jL_visiblesPerdidos.setText("Visibles perdidos: " + jugadorActivo.obtenerMalRolloPendiente().obtenerVisiblesPerdidos());
            f = "Tipos visibles perdidos: ";

            for (TipoTesoro t: jugadorActivo.obtenerMalRolloPendiente().obtenerTipoVisiblesPerdidos())
            {
                f += t + " | ";
            }
            jL_tipoVisiblesPerdidos.setText(f);

        }
        else
        {
            jL_ocultosPerdidos.setText("");

            jL_tipoOcultosPerdidos.setText("");

            jL_visiblesPerdidos.setText(""); 
            jL_tipoVisiblesPerdidos.setText("");
        }


        // Se han estado a√±adiendo y quitando componentes del JPanel, no solo
        // modificando alg√∫n atributo de un componente existente.
        // No s√≥lo se requiere pack(), sino tambi√©n repaint()
        repaint();
        pack();



    }
}
